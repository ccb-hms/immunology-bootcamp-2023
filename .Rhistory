filter(!is.na(OHXDECAY)) %>% # Gets the 3346 with non-NA dental carie variable
filter(!is.na(diabetes)) # Gets the 3046 with a diabetic status
tab1 = svytable(~age.cat + dental.caries, ado_design)
round(tab1[1,]/sum(tab1[1,]), digits=3)
round(tab1[2,]/sum(tab1[2,]), digits=3)
svytable(~RIDRETH1, ado_design)
# Model 1: Unadjusted
logit1 <- svyglm(dental.caries~ diabetes, family=quasibinomial, design=ado_design, na.action = na.omit)
exp(coef(logit1))
summary(logit1)
# Model 2: Controlled for age, race/ethnicity, gender
logit2 <- svyglm(dental.caries~ diabetes + RIDRETH1 + RIAGENDR + RIDAGEYR, family=quasibinomial, design=ado_design, na.action = na.omit)
exp(coef(logit2))
summary(logit2)
# Model 3: Controlled for age, race/ethnicity, gender, BMI
logit3 <- svyglm(dental.caries~ diabetes + RIDRETH1 + RIAGENDR + RIDAGEYR + BMXBMI, family=quasibinomial, design=ado_design, na.action = na.omit)
summary(logit3)
# Model 4: Controlled for age, race/ethnicity, gender, BMI, and family income-to-poverty ratio
# Model 5: Controlled for age, race/ethnicity, gender, BMI, family income-to-poverty ratio, and country of birth
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
View(all_nhanes)
library(ggplot2)
library(ggplot2)
ggplot(data = CPS85,
mapping = aes(x = exper , y =  wage))
# load data
data(CPS85 , package = "mosaicData")
library(ggplot2)
# load data
data(CPS85 , package = "mosaicData")
install.packages(mosaicData)
install.packages("mosaicData")
library(mosaicData)
# load data
data(CPS85 , package = "mosaicData")
library(ggplot2)
ggplot(data = CPS85,
mapping = aes(x = exper , y =  wage))
View(CPS85)
View(CPS85)
library(ggplot2)
ggplot(data = CPS85,
mapping = aes(x = exper , y =  wage))
# add points
ggplot(data = CPS85,
mapping = aes(x = exper, y = wage)) +
geom_point()
# add points
ggplot(data = CPS85,
mapping = aes(x = exper, y = wage)) +
geom_point()
# make points blue, larger, and semi-transparent
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3)
# delete outlier
library(dplyr)
plotdata <- filter(CPS85, wage < 40)
# redraw scatterplot
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point()
# make points blue, larger, and semi-transparent
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3)
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
library(ggplot2)
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "red",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "blue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
cornflowerblue
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
linewidth = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
linewidth = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# indicate sex using color
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5)
# reproduce plot for each level of job sector
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7) +
geom_smooth(method = "lm",
se = FALSE) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue")) +
facet_wrap(~sector)
library(mosaicData)
data(CPS85 , package = "mosaicData")
View(CPS85)
# add informative labels
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7) +
geom_smooth(method = "lm",
se = FALSE) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue")) +
facet_wrap(~sector) +
labs(title = "Relationship between wages and experience",
subtitle = "Current Population Survey",
caption = "source: http://mosaic-web.org/",
x = " Years of Experience",
y = "Hourly Wage",
color = "Gender")
quarto::quarto_render(output_format = "all")
install.packages("quarto")
library(quarto)
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
quarto_render(output_format = "all")
install.packages("reactable")
quarto_render(output_format = "all")
install.packages(reactablefmtr)
install.packages("reactablefmtr")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
View(base_df_d)
data(Salaries, package="carData")
install.packages("carData")
Salaries <- data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
library(ggplot2)
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
library(ggplot2)
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
Salaries <- data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
load("../data/new_metadata.RData")
load("/data/new_metadata.RData")
load("data/new_metadata.RData")
View(new_metadata)
library(ggplot2)
load("../data/new_metadata.RData")
load("data/new_metadata.RData")
ggplot(new_metadata) # what happens?
ggplot(new_metadata) +
geom_point() # note what happens here
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=3.0) +
theme_bw()
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title = element_text(hjust = 0.5, size = rel(1.5)))
personal_theme <- function(){
theme_minimal() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
}
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8) +
personal_theme()
#| eval: false
#install.packages(plotly)
library(plotly)
fig <- plot_ly(data = new_metadata,
x = ~age_in_days, y = ~samplemeans,
color = ~genotype, symbol = ~celltype,
# Hover Text
text = ~paste("Replicate ", replicate))
fig
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
new_metadata$genotype <- factor(new_metadata$genotype, levels=c("Wt","KO"))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5))) +
#We can also use hex color values to choose colors
scale_fill_manual(values=c("#F67280", "#355C7D"))
3 + 5
12 / 7
weight_kg <- 55
weight_kg <- 55    # doesn't print anything
(weight_kg <- 55)  # but putting parenthesis around the call prints the value of `weight_kg`
weight_kg          # and so does typing the name of the object
2.2 * weight_kg
weight_kg <- 57.5
2.2 * weight_kg
weight_lb <- 2.2 * weight_kg
weight_kg <- 100
mass <- 47.5            # mass?
age  <- 122             # age?
mass <- mass * 2.0      # mass?
age  <- age - 20        # age?
mass_index <- mass/age  # mass_index?
round(3.14159)
args(round)
round(3.14159, digits = 2)
round(3.14159, 2)
round(digits = 2, x = 3.14159)
weight_g <- c(50, 60, 65, 82)
weight_g
molecules <- c("dna", "rna", "protein")
molecules
length(weight_g)
length(molecules)
class(weight_g)
class(molecules)
str(weight_g)
str(molecules)
weight_g <- c(weight_g, 90) # add to the end of the vector
weight_g <- c(30, weight_g) # add to the beginning of the vector
weight_g
num_char <- c(1, 2, 3, "a")
num_logical <- c(1, 2, 3, TRUE, FALSE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1, 2, 3, "4")
class(num_char)
num_char
class(num_logical)
num_logical
class(char_logical)
char_logical
class(tricky)
tricky
num_logical <- c(1, 2, 3, TRUE)
char_logical <- c("a", "b", "c", TRUE)
combined_logical <- c(num_logical, char_logical)
combined_logical
molecules <- c("dna", "rna", "peptide", "protein")
molecules[2]
molecules[c(3, 2)]
more_molecules <- molecules[c(1, 2, 3, 2, 1, 4)]
more_molecules
molecules ## all molecules
molecules[-1] ## all but the first one
molecules[-c(1, 3)] ## all but 1st/3rd ones
molecules[c(-1, -3)] ## all but 1st/3rd ones
weight_g <- c(21, 34, 39, 54, 55)
weight_g[c(TRUE, FALSE, TRUE, TRUE, FALSE)]
## will return logicals with TRUE for the indices that meet
## the condition
weight_g > 50
## so we can use this to select only the values above 50
weight_g[weight_g > 50]
weight_g[weight_g < 30 | weight_g > 50]
weight_g[weight_g >= 30 & weight_g == 21]
molecules <- c("dna", "rna", "protein", "peptide")
molecules[molecules == "rna" | molecules == "dna"] # returns both rna and dna
molecules %in% c("rna", "dna", "metabolite", "peptide", "glycerol")
molecules[molecules %in% c("rna", "dna", "metabolite", "peptide", "glycerol")]
"four" > "five"
x <- c(1, 5, 3, 5, 10)
names(x) ## no names
names(x) <- c("A", "B", "C", "D", "E")
names(x) ## now we have names
x[c(1, 3)]
x[c("A", "C")]
heights <- c(2, 4, 4, NA, 6)
mean(heights)
max(heights)
mean(heights, na.rm = TRUE)
max(heights, na.rm = TRUE)
## Extract those elements which are not missing values.
heights[!is.na(heights)]
## Returns the object with incomplete cases removed.
## The returned object is an atomic vector of type `"numeric"`
## (or `"double"`).
na.omit(heights)
## Extract those elements which are complete cases.
## The returned object is an atomic vector of type `"numeric"`
## (or `"double"`).
heights[complete.cases(heights)]
heights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)
heights_no_na <- heights[!is.na(heights)]
## or
heights_no_na <- na.omit(heights)
median(heights, na.rm = TRUE)
heights_above_67 <- heights_no_na[heights_no_na > 67]
length(heights_above_67)
set.seed(1)
numeric(3)
numeric(10)
numeric(0)
character(2) ## the empty character
logical(2)   ## FALSE
expression <- c("high","low","low","medium","high","medium","medium","low","low","low")
expression[expression == "high"]    ## This will only return those elements in the factor equal to "high"
expression
expression <- factor(expression, levels=c("low", "medium", "high"))     # you can re-factor a factor
expression <- factor(c("high","low","low","medium","high","medium","medium","low","low","low"))
expression[expression == "high"]    ## This will only return those elements in the factor equal to "high"
str(expression)
expression <- factor(c("high","medium","low","medium","high","medium","medium","low","low","low"))
expression[expression == "high"]    ## This will only return those elements in the factor equal to "high"
str(expression)
expression <- factor(c("high","low","low","medium","high","medium","medium","low","low","low"))
expression <- factor(c("low","high","low","low","medium","high","medium","medium","low","low","low"))
str(expression)
str(expression)
expression <- factor(c("high","low","low","medium","high","medium","medium","low","low","low"))
expression[expression == "high"]    ## This will only return those elements in the factor equal to "high"
str(expression)
expression <- factor(expression, levels=c("low", "medium", "high"))     # you can re-factor a factor
str(expression)
rna <- read_csv("data/rnaseq.csv")
## load the tidyverse packages, incl. dplyr
library("tidyverse")
rna <- read_csv("data/rnaseq.csv")
## view the data
rna
head(rna$gene)
head(rna$gene, 10)
rnorm(10, 500)
rnorm(10) * 500
rnorm(10) * 100
rnorm(10) * 100
(expression * 100) + (rnorm(10) * 100)
(int(expression) * 100) + (rnorm(10) * 100)
as.numeric(expression)
(as.numeric(expression) * 1000) + (rnorm(10) * 900)
# First let's make some accompanying name and expression data for our expression levels
gene_names <- c("Asl","Apod","Cyp2d22","Klk6","Fcrls","Slc2a4","Exd2","Gjc2","Plp1","Gnb4")
# Generating random data inline with the expression values
numeric_expression <- (as.numeric(expression) * 1000) + (rnorm(10) * 900)
# Create a data frame and store it as a variable called 'df'
df <- data.frame(gene_names, expression, numeric_expression)
View(df)
list1 <- list(expression, age, char_logical)
View(list1)
list1 <- list(expression, age, df)
View(list1)
quarto::quarto_render(output_format = "all")
