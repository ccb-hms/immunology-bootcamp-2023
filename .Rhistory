ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
linewidth = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
linewidth = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# indicate sex using color
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5)
# reproduce plot for each level of job sector
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7) +
geom_smooth(method = "lm",
se = FALSE) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue")) +
facet_wrap(~sector)
library(mosaicData)
data(CPS85 , package = "mosaicData")
View(CPS85)
# add informative labels
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7) +
geom_smooth(method = "lm",
se = FALSE) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue")) +
facet_wrap(~sector) +
labs(title = "Relationship between wages and experience",
subtitle = "Current Population Survey",
caption = "source: http://mosaic-web.org/",
x = " Years of Experience",
y = "Hourly Wage",
color = "Gender")
quarto::quarto_render(output_format = "all")
install.packages("quarto")
library(quarto)
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
quarto_render(output_format = "all")
install.packages("reactable")
quarto_render(output_format = "all")
install.packages(reactablefmtr)
install.packages("reactablefmtr")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
View(base_df_d)
data(Salaries, package="carData")
install.packages("carData")
Salaries <- data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
library(ggplot2)
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
library(ggplot2)
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
Salaries <- data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
load("../data/new_metadata.RData")
load("/data/new_metadata.RData")
load("data/new_metadata.RData")
View(new_metadata)
library(ggplot2)
load("../data/new_metadata.RData")
load("data/new_metadata.RData")
ggplot(new_metadata) # what happens?
ggplot(new_metadata) +
geom_point() # note what happens here
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=3.0) +
theme_bw()
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title = element_text(hjust = 0.5, size = rel(1.5)))
personal_theme <- function(){
theme_minimal() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
}
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8) +
personal_theme()
#| eval: false
#install.packages(plotly)
library(plotly)
fig <- plot_ly(data = new_metadata,
x = ~age_in_days, y = ~samplemeans,
color = ~genotype, symbol = ~celltype,
# Hover Text
text = ~paste("Replicate ", replicate))
fig
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
new_metadata$genotype <- factor(new_metadata$genotype, levels=c("Wt","KO"))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5))) +
#We can also use hex color values to choose colors
scale_fill_manual(values=c("#F67280", "#355C7D"))
quarto::quarto_render(output_format = "all")
## load the new_metadata data frame into your environment from a .RData object
load("data/new_metadata.RData")
# this data frame should have 12 rows and 5 columns
View(new_metadata)
library(ggplot2)
load("data/new_metadata.RData")
ggplot(new_metadata) # what happens?
#ggplot(new_metadata) +
# geom_point() # note what happens here
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=3.0) +
theme_bw()
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title = element_text(hjust = 0.5, size = rel(1.5)))
personal_theme <- function(){
theme_minimal() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
}
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8) +
personal_theme()
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
new_metadata$genotype <- factor(new_metadata$genotype, levels=c("Wt","KO"))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5))) +
#We can also use hex color values to choose colors
scale_fill_manual(values=c("#F67280", "#355C7D"))
pdf("figures/scatterplot.pdf")
load("data/new_metadata.RData")
metadata <- readRDS("data/new_metadata.RData")
metadata <- readRDS("session-materials/session3/data/new_metadata.RData")
metadata <- readRenviron("session-materials/session3/data/new_metadata.RData")
metadata <- readRDS("session-materials/session3/data/new_metadata.RData")
load("session-materials/session3/data/new_metadata.RData")
metadata <- load("session-materials/session3/data/new_metadata.RData")
metadata
View(new_metadata)
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
library(ggplot2)
quarto::quarto_render(output_format = "all")
library(ggplot2)
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
library(modelr)
quarto::quarto_render(output_format = "all")
library(ggplot2)
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
?sample()
?sample()
?sample()
cat(1,2)
molecules > "z"
heights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)
median(heights, na.rm = TRUE)
??median()
?median()
numeric()
numeric(10, 1)
numeric(10)
?rnorm()
# Create a sample of 100 numbers which are normally distributed.
norm_random1 <- rnorm(100)
norm_random1
# Create a sample of 100 numbers which are normally distributed.
norm_random1 <- rnorm(100, mean = 2, sd =1)
hist(norm_random1)
norm_random1 <- rnorm(100, mean = 2, sd =0.5)
hist(norm_random1)
# Create a sample of 100 numbers which are normally distributed.
norm_random1 <- rnorm(100, mean = 4, sd =1.5)
# If we want to create a qucik histogram:
hist(norm_random1)
library(tidyverse)
read.csv("../immunology-bootcamp-2023/session-materials/session2/data/rnaseq.csv")
rna <- read.csv("../immunology-bootcamp-2023/session-materials/session2/data/rnaseq.csv")
View(rna)
select(rna, gene, sample, tissue, expression)
```{r}
library(tidyverse)
library(modelr)
options(na.action = na.warn)
library(nycflights13)
library(lubridate)
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(color, price)) + geom_boxplot()
ggplot(diamonds, aes(clarity, price)) + geom_boxplot()
quarto::quarto_render(output_format = "all")
install.packages(c("askpass", "bslib", "cpp11", "credentials", "curl", "cyclocomp", "dplyr", "dqrng", "fontawesome", "fs", "gert", "ggplot2", "gifski", "gtable", "htmltools", "httr", "igraph", "KernSmooth", "labeling", "languageserver", "lintr", "magick", "markdown", "Matrix", "mgcv", "nlme", "openssl", "packrat", "patchwork", "progressr", "promises", "purrr", "RcppArmadillo", "rematch", "remotes", "renv", "reticulate", "rmarkdown", "rsconnect", "sass", "shiny", "spatial", "spatstat.explore", "spatstat.geom", "styler", "survival", "targets", "tikzDevice", "tinytex", "uuid", "xfun"))
install.packages(c("askpass", "bslib", "cpp11", "credentials", "curl", "cyclocomp", "dplyr", "dqrng", "fontawesome", "fs", "gert", "ggplot2", "gifski", "gtable", "htmltools", "httr", "igraph", "KernSmooth", "labeling", "languageserver", "lintr", "magick", "markdown", "Matrix", "mgcv", "nlme", "openssl", "packrat", "patchwork", "progressr", "promises", "purrr", "RcppArmadillo", "rematch", "remotes", "renv", "reticulate", "rmarkdown", "rsconnect", "sass", "shiny", "spatial", "spatstat.explore", "spatstat.geom", "styler", "survival", "targets", "tikzDevice", "tinytex", "uuid", "xfun"))
install.packages(c("askpass", "bslib", "cpp11", "credentials", "curl", "cyclocomp", "dplyr", "dqrng", "fontawesome", "fs", "gert", "ggplot2", "gifski", "gtable", "htmltools", "httr", "igraph", "KernSmooth", "labeling", "languageserver", "lintr", "magick", "markdown", "Matrix", "mgcv", "nlme", "openssl", "packrat", "patchwork", "progressr", "promises", "purrr", "RcppArmadillo", "rematch", "remotes", "renv", "reticulate", "rmarkdown", "rsconnect", "sass", "shiny", "spatial", "spatstat.explore", "spatstat.geom", "styler", "survival", "targets", "tikzDevice", "tinytex", "uuid", "xfun"))
install.packages(c("askpass", "bslib", "cpp11", "credentials", "curl", "cyclocomp", "dplyr", "dqrng", "fontawesome", "fs", "gert", "ggplot2", "gifski", "gtable", "htmltools", "httr", "igraph", "KernSmooth", "labeling", "languageserver", "lintr", "magick", "markdown", "Matrix", "mgcv", "nlme", "openssl", "packrat", "patchwork", "progressr", "promises", "purrr", "RcppArmadillo", "rematch", "remotes", "renv", "reticulate", "rmarkdown", "rsconnect", "sass", "shiny", "spatial", "spatstat.explore", "spatstat.geom", "styler", "survival", "targets", "tikzDevice", "tinytex", "uuid", "xfun"))
install.packages(c("askpass", "bslib", "cpp11", "credentials", "curl", "cyclocomp", "dplyr", "dqrng", "fontawesome", "fs", "gert", "ggplot2", "gifski", "gtable", "htmltools", "httr", "igraph", "KernSmooth", "labeling", "languageserver", "lintr", "magick", "markdown", "Matrix", "mgcv", "nlme", "openssl", "packrat", "patchwork", "progressr", "promises", "purrr", "RcppArmadillo", "rematch", "remotes", "renv", "reticulate", "rmarkdown", "rsconnect", "sass", "shiny", "spatial", "spatstat.explore", "spatstat.geom", "styler", "survival", "targets", "tikzDevice", "tinytex", "uuid", "xfun"))
install.packages(c("askpass", "bslib", "cpp11", "credentials", "curl", "cyclocomp", "dplyr", "dqrng", "fontawesome", "fs", "gert", "ggplot2", "gifski", "gtable", "htmltools", "httr", "igraph", "KernSmooth", "labeling", "languageserver", "lintr", "magick", "markdown", "Matrix", "mgcv", "nlme", "openssl", "packrat", "patchwork", "progressr", "promises", "purrr", "RcppArmadillo", "rematch", "remotes", "renv", "reticulate", "rmarkdown", "rsconnect", "sass", "shiny", "spatial", "spatstat.explore", "spatstat.geom", "styler", "survival", "targets", "tikzDevice", "tinytex", "uuid", "xfun"))
install.packages(c("askpass", "bslib", "cpp11", "credentials", "curl", "cyclocomp", "dplyr", "dqrng", "fontawesome", "fs", "gert", "ggplot2", "gifski", "gtable", "htmltools", "httr", "igraph", "KernSmooth", "labeling", "languageserver", "lintr", "magick", "markdown", "Matrix", "mgcv", "nlme", "openssl", "packrat", "patchwork", "progressr", "promises", "purrr", "RcppArmadillo", "rematch", "remotes", "renv", "reticulate", "rmarkdown", "rsconnect", "sass", "shiny", "spatial", "spatstat.explore", "spatstat.geom", "styler", "survival", "targets", "tikzDevice", "tinytex", "uuid", "xfun"))
install.packages(c("askpass", "bslib", "cpp11", "credentials", "curl", "cyclocomp", "dplyr", "dqrng", "fontawesome", "fs", "gert", "ggplot2", "gifski", "gtable", "htmltools", "httr", "igraph", "KernSmooth", "labeling", "languageserver", "lintr", "magick", "markdown", "Matrix", "mgcv", "nlme", "openssl", "packrat", "patchwork", "progressr", "promises", "purrr", "RcppArmadillo", "rematch", "remotes", "renv", "reticulate", "rmarkdown", "rsconnect", "sass", "shiny", "spatial", "spatstat.explore", "spatstat.geom", "styler", "survival", "targets", "tikzDevice", "tinytex", "uuid", "xfun"))
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
norm_random1 <- rnorm(100, mean = 4, sd =1.5)
norm_random2 <- rnorm(100, mean = 3.5, sd =2)
hist(norm_random2)
hist(norm_random1)
norm_random2
t.test(norm_random1,norm_random2)
read.csv("session-materials/session2/data/rnaseq.csv")
rna <- read_csv("session-materials/session2/data/rnaseq.csv")
library(tidyverse)
rna <- read_csv("session-materials/session2/data/rnaseq.csv")
rna %>%
group_by(gene)
rna %>% mutate(time_hours = time * 24)
rana_with_time <- rna %>% mutate(time_hours = time * 24)
View(rana_with_time)
rna %>% mutate(time_hours = time * 24) %>% select(time, time_hours)
rna |> mutate(time_hours = time * 24|> select(time, time_hours)
rna |> mutate(time_hours = time * 24 |> select(time, time_hours)
rna |> mutate(time_hours = time * 24) |> select(time, time_hours)
rna |> mutate(time_hours = time * 24, time_mn = time_hours * 60) |> select(time, time_hours, time_mn)
View(rna)
View(rna)
new_rna_df <- rna |> select(gene, chromosome_name, phenotype_description, sample, expression) |>
mutate(expression_log = log(expression))
View(new_rna_df)
new_rna_df <- rna |> select(gene, chromosome_name, phenotype_description, sample, expression) |>
mutate(expression_log = log(expression)) |>
filter(chromosome_name == "X" | chromosome_name == "Y")
View(new_rna_df)
View(new_rna_df)
new_rna_df <- rna |> select(gene, chromosome_name, phenotype_description, sample, expression) |>
mutate(expression_log = log(expression)) |>
filter(chromosome_name == "X" | chromosome_name == "Y") |>
filter(!is.na(phenotype_description)) |>
filter(expression > 5)
View(new_rna_df)
View(rna)
rna |> group_by(gene)
rna |> group_by(sample)
rna |> group_by(gene) |> summarise(mean_expression = mean(expression))
rna |> group_by(sample) |> summarise(mean_expression = mean(expression))
rna |> group_by(sample) |> mutate(mean_expression = summarise(mean_expression = mean(expression))
)
summarise(mean_expression = mean(expression))
rna |> group_by(gene) |> summarise(mean_expression = mean(expression))
rna |> group_by(sample) |> mutate(mean_expression = mean(expression))
test_rna |> group_by(sample) |> mutate(mean_expression = mean(expression))
test_rna <- rna |> group_by(sample) |> mutate(mean_expression = mean(expression))
View(test_rna)
View(rana_with_time)
View(test_rna)
rna |> group_by(gene, infection, time)
rna |> group_by(gene, infection, time) |> summarise(mean_expression = mean(expression))
rna |> group_by(gene, infection, time)
rna |> group_by(gene, infection, time) |> summarise(mean_expression = mean(expression))
rna |> filter(gene == "Dok3") |> group_by(time) |> summarise(mean= mean(expression))
View(rna)
rna |> filter(sample == "GSM2545336") |> group_by(sample) |> summarise(mean= mean(expression))
rna |> filter(gene == "Dok3") |> group_by(time) |> summarise(mean= mean(expression))
View(rna)
rna |> count(infection)
rna |> group_by(infection) |> summarise(n=n())
rna |> count(infection, time)
View(rna)
View(rna)
rna |> count(sample)
rna |> count(sample) |> summarise(seq_depth = sum(expression))
rna |> count(sample) |> summarise(seq_depth = sum(expression))
rna |> group_by(sample) |> count(sample) |> summarise(seq_depth = sum(expression))
rna |> group_by(sample) |> summarise(seq_depth = sum(expression))
rna |> group_by(sample) |> summarise(seq_depth = sum(expression)) |> arrange(desc(seq_depth))
View(rna)
rna |> filter(sample == "GSM2543336")
rna |> filter(sample == "GSM2543336") |> group_by(gene_biotype) |> count(gene_biotype)
rna |> filter(sample == "GSM2545336") |> group_by(gene_biotype) |> count(gene_biotype)
rna |> filter(sample == "GSM2545336") |> group_by(gene_biotype) |> count(gene_biotype) |> arrange(desc(n))
View(rna)
rna |> arrange(gene)
rna_exp <- rna |> select(gene, sample, expression)
rna_exp
rna_exp |> pivot_wider(names_from = sample, values_from =  expression)
View(rna_exp)
rna_exp <- rna_exp |> pivot_wider(names_from = sample, values_from =  expression)
View(rna_exp)
rna_exp_wide <- rna_exp |> pivot_longer(names_to = sample, values_to = expression)
rna_exp_wide <- rna_exp |> pivot_longer(names_to = sample, values_to = expression, -gene)
rna_exp <- rna |> select(gene, sample, expression)
rna_exp_wide <- rna_exp |> pivot_wider(names_from = sample, values_from =  expression)
rna_exp_wide <- rna_exp |> pivot_longer(names_to = sample, values_to = expression, -gene)
rna_exp_wide <- rna_exp_wide |> pivot_longer(names_to = sample, values_to = expression, -gene)
rna_exp_longer <- rna_exp_wide |> pivot_longer(names_to = sample, values_to = expression, -gene)
rna_exp <- rna |> select(gene, sample, expression)
View(rna_exp)
rna_exp_wide <- rna_exp |> pivot_wider(names_from = sample, values_from = expression)
View(rna_exp_wide)
rna_exp_longer <- rna_exp_wide |> pivot_longer(names_to = sample, values_to = expression, -gene)
rna_exp_longer <- rna_exp_wide |> pivot_longer(names_to = "sample", values_to = "expression", -gene)
View(rna_exp)
