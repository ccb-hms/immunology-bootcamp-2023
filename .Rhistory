breaks = c(13, 15, 18),
include.lowest = TRUE,
labels = c("13-15", "16-18")),
LBXGLU.cat = case_when(
LBXGLU < 100 ~ "<100 mg/dl",
LBXGLU < 126 ~ ">=100 mg/dl and <126 mg/dl",
LBXGLU >= 126 ~ ">=126 mg/dl",
.default = NA),
LBXGH.cat = case_when(
LBXGH < 5.7 ~ "<5.7%",
LBXGH >= 5.7 ~ ">=5.7% and <6.5%",
LBXGH >= 6.5 ~ ">= 6.5%",
.default = NA),
BMXBMI.cat = case_when(
BMXBMI < 25 ~ "Normal",
BMXBMI < 30 ~ "Overweight",
BMXBMI >= 30 ~ "Obese",
.default = NA),
INDFMPIR.cat = case_when(
INDFMPIR == "PIR value greater than or equa" ~ ">= 1",
INDFMPIR == "Value greater than or equal to" ~ ">= 1",
as.numeric(INDFMPIR) >= 1 ~ ">=1",
as.numeric(INDFMPIR) < 1 ~ "<1",
.default = NA),
DMDBORN.cat = case_when(
DMDBORN == "Born in 50 US States or Washi" ~ "Within the US",
is.na(DMDBORN) ~ NA,
DMDBORN == "Don't Know" ~ NA,
DMDBORN == "Refused" ~ NA,
.default = "Outside the US"),
dental.caries = OHXDECAY | OHXREST,
diabetes = case_when(
is.na(LBXGH) & is.na(LBXGLU) ~ NA,
LBXGH >= 6.5 | LBXGLU >= 126 ~ "diabetic",
LBXGH >= 5.7 | LBXGLU >= 100 ~ "prediabetic",
.default = "nondiabetic"))
wt_nhanes <- all_nhanes %>%
drop_na(WTMEC2YR, SDMVPSU, SDMVSTRA)
##try de-tidying it to see if we can get the models to behave
wt_nhanes <- wt_nhanes %>%
mutate(WTMEC6YR = WTMEC2YR * 1/3)
wt_nhanes=data.frame(wt_nhanes)
wt_nhanes$diabetes = factor(wt_nhanes$diabetes, levels=c("nondiabetic","prediabetic","diabetic"))
nhanes_design <- svydesign(id     = ~SDMVPSU,
strata  = ~SDMVSTRA,
weights = ~WTMEC6YR,
nest    = TRUE,
survey.lonely.psu = "adjust",
data    = wt_nhanes)
summary(nhanes_design)
ado_design <- subset(nhanes_design, RIDAGEYR >= 13 & RIDAGEYR <= 18 & !is.na(OHXDECAY))
#Also make a tibble of this data to analyze
ado_data <- wt_nhanes %>%
filter(RIDAGEYR >= 13 & RIDAGEYR <= 18) %>% # Gets the 3660 nonedentulous adolescents
filter(!is.na(OHXDECAY)) %>% # Gets the 3346 with non-NA dental carie variable
filter(!is.na(diabetes)) # Gets the 3046 with a diabetic status
tab1 = svytable(~age.cat + dental.caries, ado_design)
round(tab1[1,]/sum(tab1[1,]), digits=3)
round(tab1[2,]/sum(tab1[2,]), digits=3)
svytable(~RIDRETH1, ado_design)
# Model 1: Unadjusted
logit1 <- svyglm(dental.caries~ diabetes, family=quasibinomial, design=ado_design, na.action = na.omit)
exp(coef(logit1))
summary(logit1)
# Model 2: Controlled for age, race/ethnicity, gender
logit2 <- svyglm(dental.caries~ diabetes + RIDRETH1 + RIAGENDR + RIDAGEYR, family=quasibinomial, design=ado_design, na.action = na.omit)
exp(coef(logit2))
summary(logit2)
# Model 3: Controlled for age, race/ethnicity, gender, BMI
logit3 <- svyglm(dental.caries~ diabetes + RIDRETH1 + RIAGENDR + RIDAGEYR + BMXBMI, family=quasibinomial, design=ado_design, na.action = na.omit)
summary(logit3)
# Model 4: Controlled for age, race/ethnicity, gender, BMI, and family income-to-poverty ratio
# Model 5: Controlled for age, race/ethnicity, gender, BMI, family income-to-poverty ratio, and country of birth
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
View(all_nhanes)
library(ggplot2)
library(ggplot2)
ggplot(data = CPS85,
mapping = aes(x = exper , y =  wage))
# load data
data(CPS85 , package = "mosaicData")
library(ggplot2)
# load data
data(CPS85 , package = "mosaicData")
install.packages(mosaicData)
install.packages("mosaicData")
library(mosaicData)
# load data
data(CPS85 , package = "mosaicData")
library(ggplot2)
ggplot(data = CPS85,
mapping = aes(x = exper , y =  wage))
View(CPS85)
View(CPS85)
library(ggplot2)
ggplot(data = CPS85,
mapping = aes(x = exper , y =  wage))
# add points
ggplot(data = CPS85,
mapping = aes(x = exper, y = wage)) +
geom_point()
# add points
ggplot(data = CPS85,
mapping = aes(x = exper, y = wage)) +
geom_point()
# make points blue, larger, and semi-transparent
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3)
# delete outlier
library(dplyr)
plotdata <- filter(CPS85, wage < 40)
# redraw scatterplot
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point()
# make points blue, larger, and semi-transparent
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3)
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
library(ggplot2)
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "red",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "blue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
cornflowerblue
# add a line of best fit.
ggplot(data = plotdata,
mapping = aes(x = exper, y = wage)) +
geom_point(color = "cornflowerblue",
alpha = .7,
size = 3) +
geom_smooth(method = "lm")
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
linewidth = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# modify the x and y axes and specify the colors to be used
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
linewidth = 1.5) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue"))
# indicate sex using color
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7,
size = 3) +
geom_smooth(method = "lm",
se = FALSE,
size = 1.5)
# reproduce plot for each level of job sector
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7) +
geom_smooth(method = "lm",
se = FALSE) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue")) +
facet_wrap(~sector)
library(mosaicData)
data(CPS85 , package = "mosaicData")
View(CPS85)
# add informative labels
ggplot(data = plotdata,
mapping = aes(x = exper,
y = wage,
color = sex)) +
geom_point(alpha = .7) +
geom_smooth(method = "lm",
se = FALSE) +
scale_x_continuous(breaks = seq(0, 60, 10)) +
scale_y_continuous(breaks = seq(0, 30, 5),
label = scales::dollar) +
scale_color_manual(values = c("indianred3",
"cornflowerblue")) +
facet_wrap(~sector) +
labs(title = "Relationship between wages and experience",
subtitle = "Current Population Survey",
caption = "source: http://mosaic-web.org/",
x = " Years of Experience",
y = "Hourly Wage",
color = "Gender")
quarto::quarto_render(output_format = "all")
install.packages("quarto")
library(quarto)
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
quarto_render(output_format = "all")
install.packages("reactable")
quarto_render(output_format = "all")
install.packages(reactablefmtr)
install.packages("reactablefmtr")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
quarto_render(output_format = "all")
View(base_df_d)
data(Salaries, package="carData")
install.packages("carData")
Salaries <- data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
library(ggplot2)
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
library(ggplot2)
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
Salaries <- data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
data(Salaries, package="carData")
ggplot(Salaries,
aes(x = rank,
y = salary)) +
geom_boxplot() +
labs(title = "Salary distribution by rank")
load("../data/new_metadata.RData")
load("/data/new_metadata.RData")
load("data/new_metadata.RData")
View(new_metadata)
library(ggplot2)
load("../data/new_metadata.RData")
load("data/new_metadata.RData")
ggplot(new_metadata) # what happens?
ggplot(new_metadata) +
geom_point() # note what happens here
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=3.0) +
theme_bw()
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title = element_text(hjust = 0.5, size = rel(1.5)))
personal_theme <- function(){
theme_minimal() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
}
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8) +
personal_theme()
#| eval: false
#install.packages(plotly)
library(plotly)
fig <- plot_ly(data = new_metadata,
x = ~age_in_days, y = ~samplemeans,
color = ~genotype, symbol = ~celltype,
# Hover Text
text = ~paste("Replicate ", replicate))
fig
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
new_metadata$genotype <- factor(new_metadata$genotype, levels=c("Wt","KO"))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5))) +
#We can also use hex color values to choose colors
scale_fill_manual(values=c("#F67280", "#355C7D"))
quarto::quarto_render(output_format = "all")
## load the new_metadata data frame into your environment from a .RData object
load("data/new_metadata.RData")
# this data frame should have 12 rows and 5 columns
View(new_metadata)
library(ggplot2)
load("data/new_metadata.RData")
ggplot(new_metadata) # what happens?
#ggplot(new_metadata) +
# geom_point() # note what happens here
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype))
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=3.0) +
theme_bw()
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans))
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8)
ggplot(new_metadata) +
geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,
shape=celltype), size=2.25) +
theme_bw() +
theme(axis.title = element_text(size=rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title = element_text(hjust = 0.5, size = rel(1.5)))
personal_theme <- function(){
theme_minimal() +
theme(axis.title=element_text(size=rel(1.5))) +
theme(plot.title=element_text(size=rel(1.5), hjust=0.5))
}
ggplot(new_metadata) +
geom_histogram(aes(x = samplemeans), stat = "bin", binwidth=0.8) +
personal_theme()
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
new_metadata$genotype <- factor(new_metadata$genotype, levels=c("Wt","KO"))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5)))
ggplot(new_metadata) +
geom_boxplot(aes(x = genotype, y = samplemeans, fill = celltype)) +
ggtitle("Genotype differences in average gene expression") +
xlab("Genotype") +
ylab("Mean expression") +
theme_bw() +
theme(axis.title = element_text(size = rel(1.25))) +
theme(plot.title=element_text(hjust = 0.5, size = rel(1.5))) +
#We can also use hex color values to choose colors
scale_fill_manual(values=c("#F67280", "#355C7D"))
pdf("figures/scatterplot.pdf")
load("data/new_metadata.RData")
metadata <- readRDS("data/new_metadata.RData")
metadata <- readRDS("session-materials/session3/data/new_metadata.RData")
metadata <- readRenviron("session-materials/session3/data/new_metadata.RData")
metadata <- readRDS("session-materials/session3/data/new_metadata.RData")
load("session-materials/session3/data/new_metadata.RData")
metadata <- load("session-materials/session3/data/new_metadata.RData")
metadata
View(new_metadata)
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
library(ggplot2)
quarto::quarto_render(output_format = "all")
library(ggplot2)
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
quarto::quarto_render(output_format = "all")
library(modelr)
