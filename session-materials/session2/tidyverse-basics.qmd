---
title: "Intro to Tidyverse"
author: ""
format: 
  html: default
code-annotations: select
---

## Data manipulation using **`dplyr`** and **`tidyr`**

Bracket subsetting is handy, but it can be cumbersome and difficult to
read, especially for complicated operations.

Some packages can greatly facilitate our task when we manipulate data.
Packages in R are basically sets of additional functions that let you
do more stuff. The functions we've been using so far, like `str()` or
`data.frame()`, come built into R; Loading packages can give you access to other
specific functions. Before you use a package for the first time you need to install
it on your machine, and then you should import it in every subsequent
R session when you need it.

- The package **`dplyr`** provides powerful tools for data manipulation tasks.
  It is built to work directly with data frames, with many manipulation tasks
  optimised.

- As we will see latter on, sometimes we want a data frame to be reshaped to be able
  to do some specific analyses or for visualisation. The package **`tidyr`** addresses
  this common problem of reshaping data and provides tools for manipulating
  data in a tidy way.

To learn more about **`dplyr`** and **`tidyr`** after the workshop,
you may want to check out this [handy data transformation with
**`dplyr`**
cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)
and this [one about
**`tidyr`**](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf).

- The **`tidyverse`** package is an "umbrella-package" that installs
  several useful packages for data analysis which work well together,
  such as **`tidyr`**, **`dplyr`**, **`ggplot2`**, **`tibble`**, etc.
  These packages help us to work and interact with the data.
  They allow us to do many things with your data, such as subsetting, transforming,
  visualising, etc.

If you did the set up, you should have already installed the tidyverse package.
Check to see if you have it by trying to load in from the library:

```{r, message=FALSE, purl=TRUE}
## load the tidyverse packages, incl. dplyr
library("tidyverse")
```

If you got an error message `there is no package called ‘tidyverse’` then you have not
installed the package yet for this version of R. To install the **`tidyverse`** package type:

```{r, eval=FALSE, purl=TRUE}
BiocManager::install("tidyverse")
```

If you had to install the **`tidyverse`** package, do not forget to load it in this R session by using the `library()` command above!


## Loading data with tidyverse

Instead of `read.csv()`, we will read in our data using the `read_csv()`
function (notice the `_` instead of the `.`), from the tidyverse package
**`readr`**.

```{r, message=FALSE, purl=TRUE}
rna <- read_csv("data/rnaseq.csv")

## view the data
rna
```

Notice that the class of the data is now referred to as a "tibble".

Tibbles tweak some of the behaviors of the data frame objects we introduced in the
previously. The data structure is very similar to a data frame. For our purposes
the only differences are that:

1. It displays the data type of each column under its name.
  Note that \<`dbl`\> is a data type defined to hold numeric values with
  decimal points.

2. It only prints the first few rows of data and only as many columns as fit on
  one screen.

We are now going to learn some of the most common **`dplyr`** functions:

- `select()`: subset columns
- `filter()`: subset rows on conditions
- `mutate()`: create new columns by using information from other columns
- `group_by()` and `summarise()`: create summary statistics on grouped data
- `arrange()`: sort results
- `count()`: count discrete values

## Selecting columns and filtering rows

To select columns of a data frame, use `select()`. The first argument
to this function is the data frame (`rna`), and the subsequent
arguments are the columns to keep.

```{r, purl=TRUE}
select(rna, gene, sample, tissue, expression)
```

To select all columns *except* certain ones, put a "-" in front of
the variable to exclude it.

```{r, purl=TRUE}
select(rna, -tissue, -organism)
```

This will select all the variables in `rna` except `tissue`
and `organism`.

To choose rows based on a specific criteria, use `filter()`:

```{r, purl=TRUE}
filter(rna, sex == "Male")
filter(rna, sex == "Male" & infection == "NonInfected")
```

Now let's imagine we are interested in the human homologs of the mouse
genes analysed in this dataset. This information can be found in the
last column of the `rna` tibble, named
`hsapiens_homolog_associated_gene_name`.  To visualise it easily, we
will create a new table containing just the 2 columns `gene` and
`hsapiens_homolog_associated_gene_name`.

```{r}
genes <- select(rna, gene, hsapiens_homolog_associated_gene_name)
genes
```

Some mouse genes have no human homologs. These can be retrieved using
`filter()` and the `is.na()` function, that determines whether
something is an `NA`.

```{r, purl=TRUE}
filter(genes, is.na(hsapiens_homolog_associated_gene_name))
```

If we want to keep only mouse genes that have a human homolog, we can
insert a "!" symbol that negates the result, so we're asking for
every row where hsapiens\_homolog\_associated\_gene\_name *is not* an
`NA`.

```{r, purl=TRUE}
filter(genes, !is.na(hsapiens_homolog_associated_gene_name))
```

## Pipes

What if you want to select and filter at the same time? There are three
ways to do this: use intermediate steps, nested functions, or pipes.

With intermediate steps, you create a temporary data frame and use
that as input to the next function, like this:

```{r, purl=TRUE}
rna2 <- filter(rna, sex == "Male")
rna3 <- select(rna2, gene, sample, tissue, expression)
rna3
```

This is readable, but can clutter up your workspace with lots of
intermediate objects that you have to name individually. With multiple
steps, that can be hard to keep track of.

You can also nest functions (i.e. one function inside of another),
like this:

```{r, purl=TRUE}
rna3 <- select(filter(rna, sex == "Male"), gene, sample, tissue, expression)
rna3
```

This is handy, but can be difficult to read if too many functions are nested, as
R evaluates the expression from the inside out (in this case, filtering, then selecting).

The last option, *pipes*, are a recent addition to R. Pipes let you take
the output of one function and send it directly to the next, which is useful
when you need to do many things to the same dataset.

Pipes in R look like `%>%` (made available via the **`magrittr`**
package) or `|>` (through base R). If you use RStudio, you can type
the pipe with <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> if you
have a PC or <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>M</kbd> if you
have a Mac.

In the above code, we use the pipe to send the `rna` dataset first
through `filter()` to keep rows where `sex` is Male, then through
`select()` to keep only the `gene`, `sample`, `tissue`, and
`expression`columns.

The pipe `%>%` takes the object on its left and passes it directly as
the first argument to the function on its right, we don't need to
explicitly include the data frame as an argument to the `filter()` and
`select()` functions any more.

```{r, purl=TRUE}
rna %>%
  filter(sex == "Male") %>%
  select(gene, sample, tissue, expression)
```

Some may find it helpful to read the pipe like the word "then". For instance,
in the above example, we took the data frame `rna`, *then* we `filter`ed
for rows with `sex == "Male"`, *then* we `select`ed columns `gene`, `sample`,
`tissue`, and `expression`.

The **`dplyr`** functions by themselves are somewhat simple, but by
combining them into linear workflows with the pipe, we can accomplish
more complex manipulations of data frames.

If we want to create a new object with this smaller version of the data, we
can assign it a new name:

```{r, purl=TRUE}
rna3 <- rna %>%
  filter(sex == "Male") %>%
  select(gene, sample, tissue, expression)

rna3
```

::: {.callout-note icon=false}

## Challenge:

Using pipes, subset the `rna` data to keep observations in female mice at time 0,
where the gene has an expression higher than 50000, and retain only the columns
`gene`, `sample`, `time`, `expression` and `age`.

:::

::: {.callout-tip icon=false collapse=true}

## Solution

```{r}
rna %>%
  filter(expression > 50000,
         sex == "Female",
         time == 0 ) %>%
  select(gene, sample, time, expression, age)
```



:::

## Mutate

Frequently you'll want to create new columns based on the values of existing
columns, for example to do unit conversions, or to find the ratio of values in two
columns. For this we'll use `mutate()`.

To create a new column of time in hours:

```{r, purl=TRUE}
rna %>%
  mutate(time_hours = time * 24) %>%
  select(time, time_hours)
```

You can also create a second new column based on the first new column within the same call of `mutate()`:

```{r, purl=TRUE}
rna %>%
  mutate(time_hours = time * 24,
         time_mn = time_hours * 60) %>%
  select(time, time_hours, time_mn)
```

::: {.callout-note icon=false}

## Challenge

Create a new data frame from the `rna` data that meets the following
criteria: contains only the `gene`, `chromosome_name`,
`phenotype_description`, `sample`, and `expression` columns. The expression
values should be log-transformed. This data frame must
only contain genes located on sex chromosomes, associated with a
phenotype\_description, and with a log expression higher than 5.

**Hint**: think about how the commands should be ordered to produce
this data frame!

:::

::: {.callout-tip icon=false collapse=true}

## Solution

```{r, eval=TRUE, purl=TRUE}
rna %>%
  mutate(expression = log(expression)) %>%
  select(gene, chromosome_name, phenotype_description, sample, expression) %>%
  filter(chromosome_name == "X" | chromosome_name == "Y") %>%
  filter(!is.na(phenotype_description)) %>%
  filter(expression > 5)
```



:::

------------------------------------------------------------------------

*The materials in this lesson have been adapted from work created by the [HBC](http://bioinformatics.sph.harvard.edu/) and [Data Carpentry](http://datacarpentry.org/), as well as materials created by Laurent Gatto, Charlotte Soneson, Jenny Drnevich, Robert Castelo, and Kevin Rue-Albert. These are open access materials distributed under the terms of the [Creative Commons Attribution license](https://creativecommons.org/licenses/by/4.0/) (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.*